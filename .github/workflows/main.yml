name: CI/CD Pipeline

on:
  push:
    branches:
      - "*"
  create:
    branches:
      - "*"
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::503226040441:role/kdu-automation-s3access-oidc
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: us-east-1

      - name: Check if bucket exists
        id: check-bucket
        run: |
          # Generate a unique bucket name for the user and branch
          USER_BUCKET_NAME="user-$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')-$(echo "${{ github.ref }}" | tr '/' '-')"
          # Check if the bucket exists
          if aws s3api head-bucket --bucket $USER_BUCKET_NAME 2>/dev/null; then
            echo "::set-output name=bucket_exists::true"
            echo "::set-output name=bucket_name::$USER_BUCKET_NAME"
          else
            echo "::set-output name=bucket_exists::false"
            echo "::set-output name=bucket_name::$USER_BUCKET_NAME"
          fi

      - name: Create bucket if it doesn't exist
        if: steps.check-bucket.outputs.bucket_exists == 'false'
        run: |
          # Get the bucket name generated in the previous step
          USER_BUCKET_NAME="${{ steps.check-bucket.outputs.bucket_name }}"
          echo "$USER_BUCKET_NAME"
          # Create the bucket
          aws s3api create-bucket --bucket $USER_BUCKET_NAME --region ap-south-1 --create-bucket-configuration LocationConstraint=ap-south-1
          aws s3api put-public-access-block --bucket $USER_BUCKET_NAME --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
          # Apply the public-read canned ACL to all objects in the bucket
          # aws s3api put-bucket-acl --bucket $USER_BUCKET_NAME --acl public-read
          # Apply a bucket policy that makes the bucket public
          aws s3api put-bucket-policy --bucket $USER_BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'"$USER_BUCKET_NAME"'/*"
              }
            ]
          }'
          # Enable static website hosting
          aws s3api put-bucket-website --bucket $USER_BUCKET_NAME --website-configuration '{
            "ErrorDocument": {"Key": "index.html"},
            "IndexDocument": {"Suffix": "index.html"}
          }'

      - name: Deploy to user's branch-specific bucket
        #         if: steps.check-bucket.outputs.bucket_exists == 'true'
        run: |
          # Get the bucket name generated in the previous step
          USER_BUCKET_NAME="${{ steps.check-bucket.outputs.bucket_name }}"
          aws s3 sync build/ s3://$USER_BUCKET_NAME
      - name: Generate deployment URL
        #         if: steps.check-bucket.outputs.bucket_exists == 'true'
        id: generate-deployment-url
        run: |
          # Get the bucket name generated in the previous step
          USER_BUCKET_NAME="${{ steps.check-bucket.outputs.bucket_name }}"
          # Generate the deployment URL based on the user and branch-specific bucket name
          DEPLOYMENT_URL="http://$USER_BUCKET_NAME.s3-website.ap-south-1.amazonaws.com"
          echo $DEPLOYMENT_URL
          echo "::set-output name=deployment_url::$DEPLOYMENT_URL"

      - name: Get deployment URL and update JSON file
        run: |
          # Get the deployment URL from the previous step
          DEPLOYMENT_URL="${{ steps.generate-deployment-url.outputs.deployment_url }}"
          echo $DEPLOYMENT_URL
          # Get the GitHub username
          GITHUB_USERNAME="${{ github.actor }}"

          # Get the branch name
          BRANCH_NAME=$(echo "${{ github.ref }}" | awk -F'/' '{print $3}')

          # Specify the bucket details
          BUCKET_NAME="kdu-frontend"

          # Check if the JSON file exists in the bucket
          if aws s3 ls s3://${BUCKET_NAME}/${BRANCH_NAME}.json; then
            # Download the JSON file from the bucket
            aws s3 cp s3://${BUCKET_NAME}/${BRANCH_NAME}.json ./temp.json
            
            # Add the key-value pair to the JSON file
            jq --arg username "$GITHUB_USERNAME" --arg url "$DEPLOYMENT_URL" '. + {($username): $url}' temp.json > updated.json
            
            # Upload the updated JSON file back to the bucket
            aws s3 cp ./updated.json s3://${BUCKET_NAME}/${BRANCH_NAME}.json
          else
            # Create a new JSON file with the key-value pair
            echo "{\"$GITHUB_USERNAME\":\"$DEPLOYMENT_URL\"}" > new.json
            
            # Upload the new JSON file to the bucket
            aws s3 cp ./new.json s3://${BUCKET_NAME}/${BRANCH_NAME}.json
          fi

